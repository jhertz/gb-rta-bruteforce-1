import sys

global_cflags = ARGUMENTS.get('CFLAGS', ' -O2 -fomit-frame-pointer')
if sys.platform == 'cygwin':
    global_cflags += ' -fpermissive'
global_cxxflags = ARGUMENTS.get('CXXFLAGS', global_cflags + ' -fno-exceptions -fno-rtti')
global_defines = ' -DHAVE_STDINT_H'
if sys.platform == 'darwin':
    global_cpppath = ['src', 'include', 'common', '/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/include/', '/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/include/darwin']
else:
    global_cpppath = ['src', 'include', 'common', '/usr/lib/jvm/java-8-openjdk-amd64/include/', '/usr/lib/jvm/java-8-openjdk-amd64/include/linux']
vars = Variables()
vars.Add('CC')
vars.Add('CXX')

env = Environment(
				  CC = "clang",
				  CXX = "clang++",
				  CPPPATH = global_cpppath,
                  CFLAGS = global_cflags + global_defines,
                  CXXFLAGS = global_cxxflags + global_defines,
		  LINKFLAGS = '-lz',
                  variables = vars)

env.ParseConfig('sdl-config --cflags --libs')

sourceFiles = Split('''
			src/bitmap_font.cpp
			src/cpu.cpp
			src/gambatte.cpp
			src/initstate.cpp
			src/interrupter.cpp
			src/interruptrequester.cpp
			src/loadres.cpp
			src/loadsave.cpp
			src/memory.cpp
			src/sound.cpp
			src/state_osd_elements.cpp
			src/statesaver.cpp
			src/tima.cpp
			src/video.cpp
			src/mem/cartridge.cpp
			src/mem/memptrs.cpp
			src/mem/pakinfo.cpp
			src/mem/rtc.cpp
			src/sound/channel1.cpp
			src/sound/channel2.cpp
			src/sound/channel3.cpp
			src/sound/channel4.cpp
			src/sound/duty_unit.cpp
			src/sound/envelope_unit.cpp
			src/sound/length_counter.cpp
			src/video/ly_counter.cpp
			src/video/lyc_irq.cpp
			src/video/next_m0_time.cpp
			src/video/ppu.cpp
			src/video/sprite_mapper.cpp
			src/sdl/gambatte_sdl.cpp
			src/sdl/audiodata.cpp
			src/sdl/blitterwrapper.cpp
			src/sdl/parser.cpp
			src/sdl/sdlblitter.cpp
			src/sdl/str_to_sdlkey.cpp
			src/sdl/syncfunc.cpp
			common/adaptivesleep.cpp
			common/resample/src/chainresampler.cpp
			common/resample/src/i0.cpp
			common/resample/src/kaiser50sinc.cpp
			common/resample/src/kaiser70sinc.cpp
			common/resample/src/makesinckernel.cpp
			common/resample/src/resamplerinfo.cpp
			common/resample/src/u48div.cpp
			common/rateest.cpp
			common/skipsched.cpp
			common/videolink/rgb32conv.cpp
			common/videolink/vfilterinfo.cpp
			common/videolink/vfilters/catrom2x.cpp
			common/videolink/vfilters/catrom3x.cpp
			common/videolink/vfilters/kreed2xsai.cpp
			common/videolink/vfilters/maxsthq2x.cpp
			common/videolink/vfilters/maxsthq3x.cpp
		   ''')

conf = env.Configure()

if conf.CheckHeader('zlib.h'):
	sourceFiles.append('src/file/unzip/unzip.c')
	sourceFiles.append('src/file/unzip/ioapi.c')
	sourceFiles.append('src/file/file_zip.cpp')
else:
	sourceFiles.append('src/file/file.cpp')

conf.Finish()

env.SharedLibrary('gambatte', sourceFiles)
